## ----------------------------------------------------------------------------
## Gimel Studio Copyright 2020 Noah Rahm, Correct Syntax. All rights reserved.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##    http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
## FILE: node_registry_base.py
## AUTHOR(S): Noah Rahm
## PURPOSE: Define the Node Registry base class
## ----------------------------------------------------------------------------

from GimelStudio.node import Node
from .exceptions import NodeExistsError, NodeNotFoundError


class NodeRegistryBase(object):
    def __init__(self):
        self._registeredNodes = {}
        

    def GetRegisteredNodes(self):
        """ Returns a dictionary containing all the nodes 
        currently registered.

        :returns: dict
        """
        return self._registeredNodes

    def RegisterNode(self, nodedef):
        """ Attempts to register a new node with the Node Registry.

        :param nodedef: subclass of NodeBase defining the node to be registered
        """
        # Initialize the node here so that we can get the IDname :)
        id_name = nodedef().NodeIDName
        if id_name == "":
            raise TypeError("This node does not have an id name (NodeIDName) specified.")
        else:
            if id_name in self.GetRegisteredNodes():
                raise NodeExistsError(id_name)

            self._registeredNodes[id_name] = nodedef

    def UnregisterNode(self, id_name):
        """ Removes a registered node from the Node Registry. 

        :param id_name: the id name (IDName) of the node to 
            be unregistered
        """
        if id_name in self.GetRegisteredNodes():
            del self._registeredNodes[id_name]
        else:
            raise NodeNotFoundError(id_name)   

    def CreateNode(self, parent, node_type, position, wx_id):
        """ Create an instance of a node associated with the specified name. 

        :param parent: parent of the node object (usually a wx.Window)
        :param node_type: type of node from registry - the IDName
        :param position: default position for the node
        :param wx_id: id for the node. Usually an id generated by wxPython.

        :returns: Node object
        :raises: TypeError if the node is not registered in the Node Registry
        """
        if node_type in self.GetRegisteredNodes():
            # Initialize the base class here so that a new instance 
            # is created for each node.
            nodedef = self._registeredNodes[node_type]()

            return Node(parent, nodedef, pos=position, _id=wx_id)
        else:
            raise NodeNotFoundError(node_type)


_NodeRegistryBase = NodeRegistryBase()